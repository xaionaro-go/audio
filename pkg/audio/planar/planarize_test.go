package planar

import (
	"bytes"
	"encoding/hex"
	"errors"
	"io"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestPlanarizeAndUnplanarize(t *testing.T) {
	for _, testCase := range []struct {
		Name     string
		TestCase []byte
	}{
		{Name: "simple", TestCase: must(hex.DecodeString("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"))},
		{Name: "large", TestCase: must(hex.DecodeString},
	} {
		t.Run(testCase.Name, func(t *testing.T) {
			b := testCase.TestCase
			planarized := make([]byte, len(b))
			err := Planarize(2, 4, planarized, b)
			require.NoError(t, err)
			unplanarized := make([]byte, len(b))
			err = Unplanarize(2, 4, unplanarized, planarized)
			require.NoError(t, err)
			require.Equal(t, b, unplanarized)
		})
	}
}

func TestUnplanarizeReaderAndPlanarizeReader(t *testing.T) {
	b := must(hex.DecodeString("000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"))
	orig := bytes.NewReader(b)
	unplanared := NewUnplanarizeReader(orig, 2, 4, 65536)
	planared := NewPlanarizeReader(unplanared, 2, 4, 65536)

	r, err := io.ReadAll(planared)
	require.True(t, errors.Is(err, io.EOF), err)
	require.Equal(t, b, r)
}
